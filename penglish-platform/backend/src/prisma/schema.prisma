// Prisma schema for Penglish Learning Platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../../../penglish.db"
}

model User {
  id             String         @id @default(uuid())
  username       String         @unique
  email          String         @unique
  password       String
  displayName    String
  level          Int            @default(1)
  totalXP        Int            @default(0)
  streak         Int            @default(0)
  lastActiveDate DateTime       @default(now())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relations
  progress       UserProgress[]
  achievements   UserAchievement[]

  @@map("users")
}

model Lesson {
  id          String   @id @default(uuid())
  unit        Int
  order       Int
  title       String
  titleEnglish String
  description String
  difficulty  String   // beginner, intermediate, advanced
  xpReward    Int
  content     String   // JSON string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  progress    UserProgress[]

  @@map("lessons")
  @@unique([unit, order])
}

model UserProgress {
  id              String   @id @default(uuid())
  userId          String
  lessonId        String
  completed       Boolean  @default(false)
  score           Int      @default(0)
  attempts        Int      @default(0)
  lastAttemptDate DateTime @default(now())
  xpEarned        Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("user_progress")
  @@unique([userId, lessonId])
}

model Achievement {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  icon        String
  requirement String   // JSON string
  xpReward    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@map("user_achievements")
  @@unique([userId, achievementId])
}
